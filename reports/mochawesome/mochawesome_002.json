{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-03T13:28:39.055Z",
    "end": "2025-06-03T13:28:39.666Z",
    "duration": 611,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3df1e1d-f4b9-4c3c-813d-eb1e67434bc7",
      "title": "",
      "fullFile": "cypress/e2e/pets/post-pet.cy.js",
      "file": "cypress/e2e/pets/post-pet.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "223ce4a9-2024-4265-9238-f823edb0ad71",
          "title": "Pet API - Create Pet",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "[PET-001] should add a new pet to the store",
              "fullTitle": "Pet API - Create Pet [PET-001] should add a new pet to the store",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petPayload = this.petPayload;\ncy.api({\n  method: \"POST\",\n  url: \"/pet\",\n  body: petPayload,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.name).to.eq(petPayload.name);\n  expect(response.body.tags.length).to.eq(3);\n  expect(response.body.tags.map(tag => tag.name)).to.include.members([\"white and black\", \"green eyes\", \"cute\"]);\n  cy.log(JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "b2c21a9a-4c7a-44ca-86e9-1a96a9f78670",
              "parentUUID": "223ce4a9-2024-4265-9238-f823edb0ad71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PET-002] should upload an image for the pet",
              "fullTitle": "Pet API - Create Pet [PET-002] should upload an image for the pet",
              "timedOut": null,
              "duration": 455,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petId = this.petPayload.id;\nconst additionalMetadata = \"Cute cat photo\";\ncy.fixture(\"images/cat.jpg\", \"binary\").then(fileContent => {\n  const image = Cypress.Blob.binaryStringToBlob(fileContent);\n  const formData = new FormData();\n  formData.append(\"file\", image);\n  formData.append(\"additionalMetadata\", additionalMetadata);\n  cy.api({\n    method: \"POST\",\n    url: `/pet/${petId}/uploadImage`,\n    body: formData,\n    additionalMetadata,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n      accept: \"application/json\"\n    }\n  }).then(response => {\n    cy.log(JSON.stringify(response.body));\n    expect(response.status).to.eq(200);\n  });\n});",
              "err": {},
              "uuid": "9d9c9b37-041d-49fc-819d-267d961439eb",
              "parentUUID": "223ce4a9-2024-4265-9238-f823edb0ad71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[PET-003] should updates a pet resource based on the form data",
              "fullTitle": "Pet API - Create Pet [PET-003] should updates a pet resource based on the form data",
              "timedOut": null,
              "duration": 54,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petId = this.petPayload.id;\nconst updatedName = \"Queen\";\nconst updatedStatus = \"pending\";\ncy.api({\n  method: \"POST\",\n  url: `/pet/${petId}`,\n  form: true,\n  body: {\n    name: updatedName,\n    status: updatedStatus\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(JSON.stringify(response.body));\n  expect(response.body).to.have.property(\"code\", 200);\n  expect(response.body).to.have.property(\"type\", \"unknown\");\n  expect(response.body).to.have.property(\"message\", petId.toString());\n});",
              "err": {},
              "uuid": "927dfde4-88e2-468e-8b06-e79c2ce5df04",
              "parentUUID": "223ce4a9-2024-4265-9238-f823edb0ad71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2c21a9a-4c7a-44ca-86e9-1a96a9f78670",
            "9d9c9b37-041d-49fc-819d-267d961439eb",
            "927dfde4-88e2-468e-8b06-e79c2ce5df04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 586,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "reportDir": "reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}